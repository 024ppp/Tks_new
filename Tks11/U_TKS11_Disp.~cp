/***********************************************************************
*             Copyright (c) 1999 NKK UNICS corporation                 *
*                         All rights reserved                          *
*                                                                      *
*  system name   : トライス検査システム（ＴＫＳ１１）                  *
*  file   name   : U_TKS11_DISP.cpp                                    *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : ブラシ幅寸法計測  GUI処理用関数                     *
*  written by    : 呉 亜娟 （NKK unics Corp.)                          *
*  reviced ver   : 1.0                                                 *
***********************************************************************/

//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
void EndBeep(void);
int EndBeepFlag = 0;         //  最後の計測ﾃﾞｰﾀかどうかの指示フラグ
int EndErrorFlag = 0;        //  規則値が規格内かどうかの指示フラグ beep()

/***********************************************************************
*  function name : void ToNextData(void)                               *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : F3,「次項」, Returnを押した場合ｶｰｿﾙを次の項目へ移動 *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void ToNextData()
{
   int irec;
   int iFlg;

   EndBeepFlag = 0;

   //  Focusが検査予定日に有った場合ﾄﾚｰNOに設定
   if(  Form1->edtymd->Focused() ) {
        Form1->edttlno->SetFocus();
        return ;
   }

   //  FocusがﾄﾚｰNOに有った場合最初計測値に設定
   if(  Form1->edttlno->Focused()){
        if( HaveSokutei )
           pEdt1[iFirstPosition-1]->SetFocus();
        return ;
   }

     //  F3 Function key 或いは 次項 ﾎﾞﾀﾝを押した場合
    // ﾃﾞｰﾀ1にFocusがある
    if( pEdt1[SamplePositionIdx-1]->Focused()) {
        pEdt2[SamplePositionIdx-1]->SetFocus();

         // ﾃﾞｰﾀセーブフラグのクリア
         iSaveFlag = 0;

         return ;
    }

    // ﾃﾞｰﾀ２にFocusがある
     if( pEdt2[SamplePositionIdx-1]->Focused()){

         //計測データ＞２の場合
        if( KD11Data[SamplePositionIdx-1].SOKUTEI_NM > 2 )
        {
            pEdt3[SamplePositionIdx-1]->SetFocus();
            pEdt3[SamplePositionIdx-1]->SelectAll();

        }else{    //データ２個の場合

           //最後の計測値へ到着した場合、フォーカスを「保存」ﾎﾞﾀﾝへセット
           if( pEdt2[iLastPosition-1]->Focused()) {

                EndBeepFlag = 1;
                Form1->BtnF11->SetFocus();
                if ( EndErrorFlag == 0 ) EndBeep();
                iSaveFlag = 0;
                return ;
            }

           //次の計測データを探す、計測しないデータを飛ばす
           irec =0;
           iFlg = 0;
           while( 1 ){
               irec +=1 ;
               if( KD11Data[SamplePositionIdx-1+irec].SOKUTE_KBN  == 1){
               iFlg = 1;
                break ;}
           }
           if( iFlg == 0 ){

             //最後の計測値へ到着した場合、フォーカスを「保存」ﾎﾞﾀﾝへセット
             EndBeepFlag = 1;
             Form1->BtnF11->SetFocus();
             if ( EndErrorFlag == 0 ) EndBeep();
           }else{

              //フォーカスを次のデータへセット
              pEdt1[SamplePositionIdx+irec-1]->SetFocus();
           }
        }
         // ﾃﾞｰﾀセーブフラグのクリア
         iSaveFlag = 0;

         return ;
    }


     //計測データ＞２の場合
    if( pEdt3[SamplePositionIdx-1]->Focused() ||
        pEdt4[SamplePositionIdx-1]->Focused() ||
        pScrl[SamplePositionIdx-1]->Focused() )   {

          if( CheckDtNo() < 0 ) return ;

          // 該当計測ﾃﾞｰﾀをセーブする
          SaveRegaiDt();
          CheckInKikaku(1);

          // ﾃﾞｰﾀセーブフラグを設定
          iSaveFlag = 1;

          //ｶﾚﾝﾄデータNO
          int  n = pEdt4[SamplePositionIdx-1]->Value  ;

          // ｶﾚﾝﾄデータNO ＞ 計測データNOの場合
          if( n >= KD11Data[SamplePositionIdx-1].SOKUTEI_NM  ){

                 // ﾃﾞｰﾀ３にFocusがある
               if( pEdt3[iLastPosition-1]->Focused() ||
                   pEdt4[iLastPosition-1]->Focused() ||
                   pScrl[iLastPosition-1]->Focused() )   {

                   EndBeepFlag = 1;
                   Form1->BtnF11->SetFocus();
                   if ( EndErrorFlag == 0 ) EndBeep();

                   iSaveFlag = 0;
                   return ;
               }

                 //次の計測データを探す、計測しないデータを飛ばす
                 irec =0;
                 iFlg =0;
                 while( 1 ){
                    irec+=1 ;
                    if( KD11Data[SamplePositionIdx-1+irec].SOKUTE_KBN  == 1)
                    {
                        iFlg = 1 ;
                        break ;
                    }
                 }

                 if( iFlg== 0){

                     //最後の計測値へ到着した場合、フォーカスを「保存」ﾎﾞﾀﾝへ設定
                     EndBeepFlag = 1;
                     Form1->BtnF11->SetFocus();
                     if ( EndErrorFlag == 0 ) EndBeep();

                 }else{
                     //フォーカスを次のデータへセット
                     pEdt1[SamplePositionIdx+irec-1]->SetFocus();
                 }


           }else{


                //履歴作画或いは工程能力の更新
                ToDrawGraph(SamplePositionIdx, iOption);

                 //データの更新
                 pEdt3[SamplePositionIdx-1]->Text = KD11Data[SamplePositionIdx-1].SOKUTEICHI[n] ;

                 pScrl[SamplePositionIdx-1]->Position = n+1 ;
                 pEdt4[SamplePositionIdx-1]->Text = IntToStr( n+1) ;

                 DataNoIdx = n+ 1;

                 pEdt3[SamplePositionIdx-1]->SelectAll();

                 //更新した計測値の規格チェック
                 CheckInKikaku(0);

           }

        }

       // ﾃﾞｰﾀセーブフラグのクリア
        iSaveFlag = 0;

        return ;
}


/***********************************************************************
*  function name : void ToPreData(void)                                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : F2,「前項」を押した場合カーソルを前の項目へ移動     *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void ToPreData()
{
int irec;
int iFlg, n;

   //  Focusが計測予定日にある場合
   if(  Form1->edtymd->Focused()){
         return ;
   }

   //  FocusがﾄﾚｰNOに有った場合最初計測値に設定
   if(  Form1->edttlno->Focused()){
         Form1->edtymd->SetFocus();
        return ;
   }

   //  FocusがPUSHﾎﾞﾀﾝにいる場合最後ﾎﾟｼﾞｼｮﾝNOに設定
    if(  Form1->BtnF01->Focused() ||
        Form1->BtnF02->Focused() ||
        Form1->BtnF03->Focused() ||
        Form1->BtnF05->Focused() ||
        Form1->BtnF07->Focused() ||
        Form1->BtnF10->Focused() ||
        Form1->BtnF11->Focused() ||
        Form1->BtnF12->Focused() ){

        if( !HaveSokutei ) {
          Form1->edttlno->SetFocus() ;
          return;
        }

        if( KD11Data[iLastPosition-1].SOKUTEI_NM > 2 ) {
            pEdt3[iLastPosition-1]->SetFocus();
            pEdt3[iLastPosition-1]->SelectAll();
        }else{
            pEdt2[iLastPosition-1]->SetFocus();}

        return ;
   }

    // ﾃﾞｰﾀ2にFocusがある
    if( pEdt2[SamplePositionIdx-1]->Focused()) {
         pEdt1[SamplePositionIdx-1]->SetFocus();

         // ﾃﾞｰﾀセーブフラグのクリア
         iSaveFlag = 0;

         return ;
    }


    // ﾃﾞｰﾀ1にFocusがある
   if( pEdt1[SamplePositionIdx-1]->Focused()){

         // 最先頭の計測データにFOCUSEED
        if( pEdt1[iFirstPosition-1]->Focused()) {
              Form1->edttlno->SetFocus();
              iSaveFlag = 0;
              return ;
        }

        // 前のデータを探すに行く、計測しないデータを飛ばす
        irec =0;
        iFlg = 0;
        while( 1 ){
              irec +=1 ;
              if( KD11Data[SamplePositionIdx-1-irec].SOKUTE_KBN  == 1) {
               iFlg = 1;
                break ;}
        }

        if( iFlg == 0 ){

              //最先頭の計測値の場合
              Form1->edttlno->SetFocus();
        }else{
               iSaveFlag = 1;

              // 計測データ数 ＞２の場合
              if( KD11Data[SamplePositionIdx-irec-1].SOKUTEI_NM > 2 ){

                 pEdt3[SamplePositionIdx-irec-1]->SetFocus();
                 pEdt3[SamplePositionIdx-irec-1]->SelectAll();

              }else{
                   // データNO ＝＝２の場合
                   pEdt2[SamplePositionIdx-irec-1]->SetFocus();
              }
        }

        // ﾃﾞｰﾀセーブフラグのクリア
        iSaveFlag = 0;
        return ;
    }


    // ﾃﾞｰﾀ3にFocusがある
    if( pEdt3[SamplePositionIdx-1]->Focused() ||
        pEdt4[SamplePositionIdx-1]->Focused() ||
        pScrl[SamplePositionIdx-1]->Focused() )   {

          if( CheckDtNo() < 0 ) return ;

          // 該当計測ﾃﾞｰﾀをセーブする
          SaveRegaiDt();
          CheckInKikaku(1);

          // ﾃﾞｰﾀセーブフラグを設定
          iSaveFlag = 1;

          //ｶﾚﾝﾄデータNO
          int  n = pEdt4[SamplePositionIdx-1]->Value  ;

          if( n <= 3){

                //一個前の計測値へカーソルを設定
                pEdt2[SamplePositionIdx-1]->SetFocus();

           }else{


                ToDrawGraph(SamplePositionIdx, iOption);

                 // データの更新
                 pEdt3[SamplePositionIdx-1]->Text = KD11Data[SamplePositionIdx-1].SOKUTEICHI[n-1-1] ;

                 pScrl[SamplePositionIdx-1]->Position = n-1 ;
                 pEdt4[SamplePositionIdx-1]->Text = IntToStr( n-1) ;

                 DataNoIdx = n-1;
                 pEdt3[SamplePositionIdx-1]->SelectAll();

                 //更新した計測値の規格チェック
                 CheckInKikaku(0);
           }

        }

       // ﾃﾞｰﾀセーブフラグのクリア
        iSaveFlag = 0;

        return ;


}

/***********************************************************************
*  function name : void CorseBack(void)                                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : マウスで画面下「前項」「次項」「Option」を押す場合  *
*                : ｶｰｿﾙを前のいる場所へ戻る                            *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void CurseBack(void)
{
    CurBackFlg = 1;

   //フォーカスが画面上の検索条件部にある場合
   if( CurField == 1 ){
      if( ymdtl_flg == 1 )  Form1->edtymd->SetFocus() ;
      if( ymdtl_flg == 2 )  Form1->edttlno->SetFocus() ;
      CurBackFlg = 0;
      return ;
   }

   //フォーカスが計測データ部にある場合
   if( CurField == 2) {
      if( DataNoIdx == 1 ){
          pEdt1[SamplePositionIdx-1]->SetFocus() ;
      }else if( DataNoIdx == 2 ){
          pEdt2[SamplePositionIdx-1]->SetFocus() ;
      }else{
          pEdt3[SamplePositionIdx-1]->SetFocus() ;
          pEdt3[SamplePositionIdx-1]->SelectAll();
      }
   }

   CurBackFlg = 0;

   return ;
}


/***********************************************************************
*  function name : void CheckInKikaku(int iBeep )                      *
*                  +--------------------------------------+            *
*          引  数  |   iBeep     | 1: Beep 0: NoBeep      |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : ｶﾚﾝﾄ計測値が規格の範囲以内かどうかのチェック        *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void CheckInKikaku(int iBeep )
{
  double  dBuf;
  int     errflg ;

    // 色、Beepをオフする場合
    if( iOption == 3  ||  iKskStart == 0 )  return ;

    // 規格によってデータをチェックする
    if( SamplePositionIdx > 0 && (SamplePositionIdx >= iFirstPosition &&
                                  SamplePositionIdx <= iLastPosition ) ){

       errflg = 0;
       // 規格の最大値、最小値を超えているかどうかのチェック
       if( DataNoIdx == 1 ){
          dBuf = pEdt1[SamplePositionIdx-1]->Value;
       }else if(DataNoIdx == 2 ){
          dBuf = pEdt2[SamplePositionIdx-1]->Value;
       }else {
          dBuf = pEdt3[SamplePositionIdx-1]->Value ;
       }

       if( (  dBuf > KD11Data[SamplePositionIdx-1].BURASI_MAX ||
              dBuf < KD11Data[SamplePositionIdx-1].BURASI_MIN ) &&
              KD11Data[SamplePositionIdx-1].SOKUTE_KBN == 1     &&
              DataNoIdx <= KD11Data[SamplePositionIdx-1].SOKUTEI_NM_CUR ){

         if( DataNoIdx == 1 ){
           pEdt1[SamplePositionIdx-1]->Font->Color = clRed;
           errflg = 1;
         }else if( DataNoIdx == 2 ){
           pEdt2[SamplePositionIdx-1]->Font->Color = clRed;
           errflg = 2;
         }else {
           pEdt3[SamplePositionIdx-1]->Font->Color = clRed;
           pEdt4[SamplePositionIdx-1]->Font->Color = clPurple;
           errflg = 3;
         }
     }else{
         if( DataNoIdx == 1 ){
           pEdt1[SamplePositionIdx-1]->Font->Color = clBlack;
         }else if( DataNoIdx == 2 ){
           pEdt2[SamplePositionIdx-1]->Font->Color = clBlack;
         }else {
           pEdt3[SamplePositionIdx-1]->Font->Color = clBlack;
         }
     }

     //不合格データが有れば音を流す
     if( errflg && iBeep ) {
     	Beep();
        EndErrorFlag = 1;
     }
     else {
        EndErrorFlag = 0;

        //RS232C読み込みフラグ 1 なら RSInput.wavを鳴らす
        //最後の計測値へ到着した場合 RSInput.wavを鳴らさない
        if (RSInputFlag == 1 && EndBeepFlag == 0 ) {
               Form1->MdPlayer->FileName = "RSInput.wav";
               Form1->MdPlayer->Open();
               Form1->MdPlayer->Play();
        }
     }
     RSInputFlag = 0;

      //３〜９９までのﾃﾞｰﾀに不合格ﾃﾞｰﾀがなければ、pEdt4[i]を白にする
      if( KD11Data[SamplePositionIdx-1].SOKUTEI_NM > 2 && DataNoIdx >=3 && errflg != 3){

        int k=0;
        for(int  i=2; i< KD11Data[SamplePositionIdx-1].SOKUTEI_NM; i++ ){

             if( (KD11Data[SamplePositionIdx-1].SOKUTEICHI[i] > KD11Data[SamplePositionIdx-1].BURASI_MAX  ||
                  KD11Data[SamplePositionIdx-1].SOKUTEICHI[i] < KD11Data[SamplePositionIdx-1].BURASI_MIN ) &&
                  KD11Data[SamplePositionIdx-1].SOKUTE_KBN == 1 &&
                  DataNoIdx <= KD11Data[SamplePositionIdx-1].SOKUTEI_NM_CUR ){
                  k= 1 ;
                  break ;
             }
         }

         //不合格ﾃﾞｰﾀがある場合
         if( k){
               pEdt4[SamplePositionIdx-1]->Font->Color = clPurple;
               errflg = 3;
         }else{
               pEdt4[SamplePositionIdx-1]->Font->Color = clBlack;
         }
      }
  }
}

/***********************************************************************
*  function name : void SaveRegaiDt(void)                              *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : 計測データデータを変数へ保存                        *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
//---------------------------------------------------------------------------

void SaveRegaiDt(void )
{
   if( KD11Data[SamplePositionIdx-1].SOKUTEI_NM > 2  &&
       KD11Data[SamplePositionIdx-1].SOKUTE_KBN == 1 &&  DataNoIdx >  2 )
   {
       int n = pEdt4[SamplePositionIdx-1]->Value;

       if( fabs(pEdt3[SamplePositionIdx-1]->Value - KD11Data[SamplePositionIdx-1].SOKUTEICHI[n-1])>0.0000001 ){

           //画面に表示しているﾃﾞｰﾀ値を更新される場合
           AllDataChg = 1;
           CurSampChg = 1;
           CurDataChg = 1;

           // 計測したデータ数をｶﾝトー
          if ( KD11Data[SamplePositionIdx-1].SOKUTEI_NM_CUR < n )
                        KD11Data[SamplePositionIdx-1].SOKUTEI_NM_CUR = n ;

          KD11Data[SamplePositionIdx-1].SOKUTEICHI[n-1] = pEdt3[SamplePositionIdx-1]->Value;

       }
   }
}


//---------------------------------------------------------------------------
/***********************************************************************
*  function name : void DisplayInfo(void)                              *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   iRec     | レコード数              |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : 測定ｻﾝﾌﾟﾙ情報を表示                                 *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
//---------------------------------------------------------------------------
void DisplayInfo(void)
{

     Form1->Pnl5->Caption = FormatFloat("#0.000", KD11Data[SamplePositionIdx-1].BURASI_MIN) ;
     Form1->Pnl6->Caption = FormatFloat("#0.000", KD11Data[SamplePositionIdx-1].BURASI_MAX) ;
     Form1->Pnl7->Caption = KD11Data[SamplePositionIdx-1].DTKSCOD ;
     Form1->Pnl8->Caption = KD11Data[SamplePositionIdx-1].DTKSHIN ;
     Form1->Pnl9->Caption = KD11Data[SamplePositionIdx-1].LOTNO ;
     Form1->Pnl10->Caption = KD11Data[SamplePositionIdx-1].HINBAN ;
     Form1->Pnl11->Caption = KD11Data[SamplePositionIdx-1].ZISCOD ;
     Form1->Pnl12->Caption = KD11Data[SamplePositionIdx-1].ZISNAM ;

}



/***********************************************************************
*  function name : void StatBarClear( AnsiString sMsg )                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : // ステータスメッセージの表示                       *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void StatBarClear( AnsiString sMsg )
{

     // ステータスメッセージ
     Form1->SBr1->SimpleText =  sMsg;
     Form1->SBr1->Update();
 }

/***********************************************************************
*  function name : int CheckDtNo( void)                                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   <0     |   <3 or > 99              |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : データNOのチェック                                  *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
int  CheckDtNo( void )
{
  int n, iRtn;

   iRtn = 0;

   n = pEdt4[SamplePositionIdx-1]->Value;

   if( n < 3 || n > KD11Data[SamplePositionIdx-1].SOKUTEI_NM ) {

       // ScrollBarの初期値設定
       int pos = pScrl[SamplePositionIdx-1]->Position  ;
       pEdt4[SamplePositionIdx-1]->Text = IntToStr(pos) ;

       iRtn = -1;

   }
   return iRtn ;
}

/***********************************************************************
*  function name : void SaveCtlID(void)                                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : 画面各ｺﾝﾄﾛｰﾙを配列変数へ保存する                    *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void SaveCtlID()
{
    // 画面各ｺﾝﾄﾛｰﾙを配列変数へ保存する
    pPnlP[0] =  Form1->PnlP1 ;         pEdt1[0] =  Form1->Edt01_1 ;
    pEdt2[0] =  Form1->Edt01_2 ;       pEdt3[0] =  Form1->Edt01_3 ;
    pEdt4[0] =  Form1->Edt01_4 ;       pScrl[0] =  Form1->ScrollBar1 ;
    pPnlN[0] =  Form1->PnlN1 ;
    pPnlP[1] =  Form1->PnlP2 ;         pEdt1[1] =  Form1->Edt02_1 ;
    pEdt2[1] =  Form1->Edt02_2 ;       pEdt3[1] =  Form1->Edt02_3 ;
    pEdt4[1] =  Form1->Edt02_4 ;       pScrl[1] =  Form1->ScrollBar2;
    pPnlN[1] =  Form1->PnlN2 ;
    pPnlP[2] =  Form1->PnlP3 ;         pEdt1[2] =  Form1->Edt03_1 ;
    pEdt2[2] =  Form1->Edt03_2 ;       pEdt3[2] =  Form1->Edt03_3 ;
    pEdt4[2] =  Form1->Edt03_4 ;       pScrl[2] =  Form1->ScrollBar3 ;
    pPnlN[2] =  Form1->PnlN3 ;
    pPnlP[3] =  Form1->PnlP4 ;         pEdt1[3] =  Form1->Edt04_1 ;
    pEdt2[3] =  Form1->Edt04_2 ;       pEdt3[3] =  Form1->Edt04_3 ;
    pEdt4[3] =  Form1->Edt04_4 ;       pScrl[3] =  Form1->ScrollBar4;
    pPnlN[3] =  Form1->PnlN4 ;
    pPnlP[4] =  Form1->PnlP5 ;         pEdt1[4] =  Form1->Edt05_1 ;
    pEdt2[4] =  Form1->Edt05_2 ;       pEdt3[4] =  Form1->Edt05_3 ;
    pEdt4[4] =  Form1->Edt05_4 ;       pScrl[4] =  Form1->ScrollBar5 ;
    pPnlN[4] =  Form1->PnlN5 ;
    pPnlP[5] =  Form1->Pnlp6 ;         pEdt1[5] =  Form1->Edt06_1 ;
    pEdt2[5] =  Form1->Edt06_2 ;       pEdt3[5] =  Form1->Edt06_3 ;
    pEdt4[5] =  Form1->Edt06_4 ;       pScrl[5] =  Form1->ScrollBar6 ;
    pPnlN[5] =  Form1->PnlN6 ;
    pPnlP[6] =  Form1->PnlP7 ;         pEdt1[6] =  Form1->Edt07_1 ;
    pEdt2[6] =  Form1->Edt07_2 ;       pEdt3[6] =  Form1->Edt07_3 ;
    pEdt4[6] =  Form1->Edt07_4 ;       pScrl[6] =  Form1->ScrollBar7 ;
    pPnlN[6] =  Form1->PnlN7 ;
    pPnlP[7] =  Form1->PnlP8 ;         pEdt1[7] =  Form1->Edt08_1 ;
    pEdt2[7] =  Form1->Edt08_2 ;       pEdt3[7] =  Form1->Edt08_3 ;
    pEdt4[7] =  Form1->Edt08_4 ;       pScrl[7] =  Form1->ScrollBar8 ;
    pPnlN[7] =  Form1->PnlN8 ;
    pPnlP[8] =  Form1->PnlP9 ;         pEdt1[8] =  Form1->Edt09_1 ;
    pEdt2[8] =  Form1->Edt09_2 ;       pEdt3[8] =  Form1->Edt09_3 ;
    pEdt4[8] =  Form1->Edt09_4 ;       pScrl[8] =  Form1->ScrollBar9;
    pPnlN[8] =  Form1->PnlN9 ;
    pPnlP[9] =  Form1->PnlP10 ;        pEdt1[9] =  Form1->Edt10_1 ;
    pEdt2[9] =  Form1->Edt10_2 ;       pEdt3[9] =  Form1->Edt10_3 ;
    pEdt4[9] =  Form1->Edt10_4 ;       pScrl[9] =  Form1->ScrollBar10 ;
    pPnlN[9] =  Form1->PnlN10 ;
    pPnlP[10] =  Form1->PnlP11 ;       pEdt1[10] =  Form1->Edt11_1 ;
    pEdt2[10] =  Form1->Edt11_2 ;      pEdt3[10] =  Form1->Edt11_3 ;
    pEdt4[10] =  Form1->Edt11_4 ;      pScrl[10] =  Form1->ScrollBar11 ;
    pPnlN[10] =  Form1->PnlN11 ;
    pPnlP[11] =  Form1->PnlP12 ;       pEdt1[11] =  Form1->Edt12_1 ;
    pEdt2[11] =  Form1->Edt12_2 ;      pEdt3[11] =  Form1->Edt12_3 ;
    pEdt4[11] =  Form1->Edt12_4 ;      pScrl[11] =  Form1->ScrollBar12 ;
    pPnlN[11] =  Form1->PnlN12 ;
    pPnlP[12] =  Form1->PnlP13 ;       pEdt1[12] =  Form1->Edt13_1 ;
    pEdt2[12] =  Form1->Edt13_2 ;      pEdt3[12] =  Form1->Edt13_3 ;
    pEdt4[12] =  Form1->Edt13_4 ;      pScrl[12] =  Form1->ScrollBar13 ;
    pPnlN[12] =  Form1->PnlN13 ;
    pPnlP[13] =  Form1->PnlP14 ;       pEdt1[13] =  Form1->Edt14_1 ;
    pEdt2[13] =  Form1->Edt14_2 ;      pEdt3[13] =  Form1->Edt14_3 ;
    pEdt4[13] =  Form1->Edt14_4 ;      pScrl[13] =  Form1->ScrollBar14 ;
    pPnlN[13] =  Form1->PnlN14 ;
    pPnlP[14] =  Form1->PnlP15 ;       pEdt1[14] =  Form1->Edt15_1 ;
    pEdt2[14] =  Form1->Edt15_2 ;      pEdt3[14] =  Form1->Edt15_3 ;
    pEdt4[14] =  Form1->Edt15_4 ;      pScrl[14] =  Form1->ScrollBar15 ;
    pPnlN[14] =  Form1->PnlN15 ;
    pPnlP[15] =  Form1->PnlP16 ;       pEdt1[15] =  Form1->Edt16_1 ;
    pEdt2[15] =  Form1->Edt16_2 ;      pEdt3[15] =  Form1->Edt16_3 ;
    pEdt4[15] =  Form1->Edt16_4 ;      pScrl[15] =  Form1->ScrollBar16 ;
    pPnlN[15] =  Form1->PnlN16 ;
    pPnlP[16] =  Form1->PnlP17 ;       pEdt1[16] =  Form1->Edt17_1 ;
    pEdt2[16] =  Form1->Edt17_2 ;      pEdt3[16] =  Form1->Edt17_3 ;
    pEdt4[16] =  Form1->Edt17_4 ;      pScrl[16] =  Form1->ScrollBar17 ;
    pPnlN[16] =  Form1->PnlN17 ;
    pPnlP[17] =  Form1->PnlP18 ;       pEdt1[17] =  Form1->Edt18_1 ;
    pEdt2[17] =  Form1->Edt18_2 ;      pEdt3[17] =  Form1->Edt18_3 ;
    pEdt4[17] =  Form1->Edt18_4 ;      pScrl[17] =  Form1->ScrollBar18 ;
    pPnlN[17] =  Form1->PnlN18 ;
    pPnlP[18] =  Form1->PnlP19 ;       pEdt1[18] =  Form1->Edt19_1 ;
    pEdt2[18] =  Form1->Edt19_2 ;      pEdt3[18] =  Form1->Edt19_3 ;
    pEdt4[18] =  Form1->Edt19_4 ;      pScrl[18] =  Form1->ScrollBar19 ;
    pPnlN[18] =  Form1->PnlN19 ;
    pPnlP[19] =  Form1->PnlP20 ;       pEdt1[19] =  Form1->Edt20_1 ;
    pEdt2[19] =  Form1->Edt20_2 ;      pEdt3[19] =  Form1->Edt20_3 ;
    pEdt4[19] =  Form1->Edt20_4 ;      pScrl[19] =  Form1->ScrollBar20 ;
    pPnlN[19] =  Form1->PnlN20 ;
    pPnlP[20] =  Form1->PnlP21 ;       pEdt1[20] =  Form1->Edt21_1 ;
    pEdt2[20] =  Form1->Edt21_2 ;      pEdt3[20] =  Form1->Edt21_3 ;
    pEdt4[20] =  Form1->Edt21_4 ;      pScrl[20] =  Form1->ScrollBar21 ;
    pPnlN[20] =  Form1->PnlN21 ;
    pPnlP[21] =  Form1->PnlP22 ;       pEdt1[21] =  Form1->Edt22_1 ;
    pEdt2[21] =  Form1->Edt22_2 ;      pEdt3[21] =  Form1->Edt22_3 ;
    pEdt4[21] =  Form1->Edt22_4 ;      pScrl[21] =  Form1->ScrollBar22 ;
    pPnlN[21] =  Form1->PnlN22 ;
    pPnlP[22] =  Form1->PnlP23 ;       pEdt1[22] =  Form1->Edt23_1 ;
    pEdt2[22] =  Form1->Edt23_2 ;      pEdt3[22] =  Form1->Edt23_3 ;
    pEdt4[22] =  Form1->Edt23_4 ;      pScrl[22] =  Form1->ScrollBar23 ;
    pPnlN[22] =  Form1->PnlN23 ;
    pPnlP[23] =  Form1->PnlP24 ;       pEdt1[23] =  Form1->Edt24_1 ;
    pEdt2[23] =  Form1->Edt24_2 ;      pEdt3[23] =  Form1->Edt24_3 ;
    pEdt4[23] =  Form1->Edt24_4 ;      pScrl[23] =  Form1->ScrollBar24 ;
    pPnlN[23] =  Form1->PnlN24 ;
    pPnlP[24] =  Form1->PnlP25 ;       pEdt1[24] =  Form1->Edt25_1 ;
    pEdt2[24] =  Form1->Edt25_2 ;      pEdt3[24] =  Form1->Edt25_3 ;
    pEdt4[24] =  Form1->Edt25_4 ;      pScrl[24] =  Form1->ScrollBar25 ;
    pPnlN[24] =  Form1->PnlN25 ;
    pPnlP[25] =  Form1->PnlP26 ;       pEdt1[25] =  Form1->Edt26_1 ;
    pEdt2[25] =  Form1->Edt26_2 ;      pEdt3[25] =  Form1->Edt26_3 ;
    pEdt4[25] =  Form1->Edt26_4 ;      pScrl[25] =  Form1->ScrollBar26 ;
    pPnlN[25] =  Form1->PnlN26 ;
    pPnlP[26] =  Form1->PnlP27 ;       pEdt1[26] =  Form1->Edt27_1 ;
    pEdt2[26] =  Form1->Edt27_2 ;      pEdt3[26] =  Form1->Edt27_3 ;
    pEdt4[26] =  Form1->Edt27_4 ;      pScrl[26] =  Form1->ScrollBar27 ;
    pPnlN[26] =  Form1->PnlN27 ;
    pPnlP[27] =  Form1->PnlP28 ;       pEdt1[27] =  Form1->Edt28_1 ;
    pEdt2[27] =  Form1->Edt28_2 ;      pEdt3[27] =  Form1->Edt28_3 ;
    pEdt4[27] =  Form1->Edt28_4 ;      pScrl[27] =  Form1->ScrollBar28 ;
    pPnlN[27] =  Form1->PnlN28 ;
    pPnlP[28] =  Form1->PnlP29 ;       pEdt1[28] =  Form1->Edt29_1 ;
    pEdt2[28] =  Form1->Edt29_2 ;      pEdt3[28] =  Form1->Edt29_3 ;
    pEdt4[28] =  Form1->Edt29_4 ;      pScrl[28] =  Form1->ScrollBar29 ;
    pPnlN[28] =  Form1->PnlN29 ;
    pPnlP[29] =  Form1->PnlP30 ;       pEdt1[29] =  Form1->Edt30_1 ;
    pEdt2[29] =  Form1->Edt30_2 ;      pEdt3[29] =  Form1->Edt30_3 ;
    pEdt4[29] =  Form1->Edt30_4 ;      pScrl[29] =  Form1->ScrollBar30 ;
    pPnlN[29] =  Form1->PnlN30 ;

}

/***********************************************************************
*  function name : void ClearRed(void )                                *
*                  +--------------------------------------+            *
*          引  数  |   なし     |                         |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : 画面に赤になっているｺﾝﾄﾛｰﾙを白に変える              *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void ClearRed(void)
{
   int i ;

   for( i=0; i<30 ; i++ ){
      if( KD11Data[i].SOKUTE_KBN == 1 ){
            pEdt1[i]->Font->Color = clBlack;
            pEdt2[i]->Font->Color = clBlack;
            pEdt3[i]->Font->Color = clBlack;
            pEdt4[i]->Font->Color = clBlack;
       }
   }

}

/***********************************************************************
*  function name : void SetRed(int iFlg )                              *
*                  +--------------------------------------+            *
*          引  数  |   1        |  「検索」ﾎﾞﾀﾝ押す場合   |            *
*                  |   2        |  「Option」ﾎﾞﾀﾝ押す場合 |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   なし     |                         |            *
*                  +--------------------------------------+            *
*  create        : 1999.10                                             *
*  update        :                                                     *
*  contents      : 規格を超えた計測値のｺﾝﾄﾛｰﾙ色を赤に変える            *
*  written by    : 呉 亜娟(NKK unics Corp.)                            *
***********************************************************************/
void SetRed(int iFlg)
{
   int i,j,k  ;

   for( i=0; i<30 ; i++ ){

      //最初登録のときに規格チェックしない
      if( iFlg == 1 && IsNullSpace( KD11Data[i].ADDYMD )) {
          pEdt1[i]->Font->Color = clBlack;
          pEdt2[i]->Font->Color = clBlack;
          pEdt3[i]->Font->Color = clBlack;
          pEdt4[i]->Font->Color == clBlack;
          continue ;
       }

      // 計測ﾚｺｰﾄﾞだけ規格をチェックする
      if( KD11Data[i].SOKUTE_KBN == 1 ){

           //測定値１
           if( (KD11Data[i].SOKUTEICHI[0] >  KD11Data[i].BURASI_MAX ||
                KD11Data[i].SOKUTEICHI[0] <  KD11Data[i].BURASI_MIN ) &&
                KD11Data[i].SOKUTEI_NM_CUR>=1 ){
              pEdt1[i]->Font->Color = clRed;
           }else{
              pEdt1[i]->Font->Color = clBlack;
           }

           //測定値2
           if( (KD11Data[i].SOKUTEICHI[1] >  KD11Data[i].BURASI_MAX ||
               KD11Data[i].SOKUTEICHI[1] <  KD11Data[i].BURASI_MIN )
                && KD11Data[i].SOKUTEI_NM_CUR>=2 ){
               pEdt2[i]->Font->Color = clRed;
           }else{
               pEdt2[i]->Font->Color = clBlack;
           }


           if( KD11Data[i].SOKUTEI_NM > 2 ){

               k = 0;
               for( j=2; j< KD11Data[i].SOKUTEI_NM ; j++){

                     //測定値3〜
                    if( (KD11Data[i].SOKUTEICHI[j] >  KD11Data[i].BURASI_MAX ||
                        KD11Data[i].SOKUTEICHI[j] <  KD11Data[i].BURASI_MIN ) &&
                         KD11Data[i].SOKUTEI_NM_CUR>=j ){
                         k = 1 ;
                         break ;
                    }

                 }

                 if( k ){
                      if( j==2 )
                         pEdt3[i]->Font->Color = clRed;
                      else
                         pEdt3[i]->Font->Color = clBlack;
                      pEdt4[i]->Font->Color = clPurple;
                  }else{
                         pEdt3[i]->Font->Color = clBlack;
                         pEdt4[i]->Font->Color = clBlack;
                  }

            }
       }
   }

}


/***********************************************************************
*  function name : Ansistring DelSEPA( Ansistring sYMD )               *
*                  +--------------------------------------+            *
*          引  数  |   sYMD        |  日付（YYYY/MM/DD）  |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |               |  日付（YYYYMMDD）    |            *
*                  +--------------------------------------+            *
*  create        : 1999.11                                             *
*  update        :                                                     *
*  contents      : 日付(YYYY/MM/DD)から(YYYYMMDD)へ変換                *
*  written by    :                            *
***********************************************************************/
AnsiString DelSEPA( AnsiString sYMD )
{
  int        iPos;
  AnsiString sRet;

  sRet = sYMD ;
  while( ( iPos = sRet.AnsiPos("/")) != 0 ){
      sRet.Delete(iPos, 1) ;

  }
  return ( sRet );

}

/***********************************************************************
*  function name : Ansistring DelSEPA( Ansistring sYMD )               *
*                  +--------------------------------------+            *
*          引  数  |   sYMD        |  日付（YYYYMMDD）    |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |               |  日付（YYYY/MM/DD）  |            *
*                  +--------------------------------------+            *
*  create        : 1999.11                                             *
*  update        :                                                     *
*  contents      : 日付(YYYYMMDD)から(YYYY/MM/DD)へ変換                *
*  written by    :                                                     *
***********************************************************************/
AnsiString InsSEPA( AnsiString sYMD )
{
  AnsiString sRet;

  sRet = sYMD ;

  sRet.Insert("/",5);
  sRet.Insert("/",8);

  return ( sRet );

}

/***********************************************************************
*  function name : void EndBeep(void)                                  *
*                  +--------------------------------------+            *
*          引  数  |   無し        |                      |            *
*                  +--------------------------------------+            *
*                  +--------------------------------------+            *
*          戻り値  |   無し        |                      |            *
*                  +--------------------------------------+            *
*  create        : 1999.12                                             *
*  update        :                                                     *
*  contents      : メディアの再生                                      *
*  written by    :                                                     *
***********************************************************************/
void EndBeep(void)
{
    Form1->MdPlayer->FileName = "End.wav";
    Form1->MdPlayer->Open();
    Form1->MdPlayer->Play();
 return ;
}


